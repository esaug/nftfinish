{"version":3,"sources":["redux/blockchain/blockchainReducer.js","redux/data/dataReducer.js","redux/store.js","redux/data/dataActions.js","redux/blockchain/blockchainActions.js","components/nft.js","components/exchange.js","App.js","index.js","../node_modules/typescript/lib sync"],"names":["initialState","loading","account","CStoryNftContract","CStoryTokenContract","CStoryMineContract","web3","errorMsg","blockchainReducer","state","action","type","payload","allNFTs","allOwnerNFTs","error","dataReducer","allStoryNfts","allOwnerStoryNfts","rootReducer","combineReducers","blockchain","data","middleware","thunk","composeEnhancers","compose","applyMiddleware","store","createStore","fetchDataFallido","fetchData","dispatch","a","getState","options","address","methods","getTrajeNFT","call","getOwnerTrajeNFT","console","log","conexionFallida","NftRender","props","Nft","Name","Str","Dex","Luk","Int","Mattk","Wattk","Type","Class","rarity","Exchange","className","href","target","rel","onClick","blockchainDatos","balance_total","then","balance","id","role","onSubmit","event","preventDefault","placeholder","value","address_balance","App","useDispatch","useSelector","MintNFT","_account","_name","_rarity","createRandomNFT","send","from","receipt","useEffect","e","window","ethereum","Web3","web32","web33","setProvider","providers","HttpProvider","request","method","net","CStoryNft","networks","CStoryNftContrato","eth","Contract","abi","CStoryToken","CStoryCoin","CStoryMine","main","map","item","index","key","ReactDOM","render","StrictMode","document","getElementById","webpackEmptyContext","req","Error","code","keys","resolve","module","exports"],"mappings":"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","file":"static/js/main.ba2beba3.chunk.js","sourcesContent":["\n\n// ESTADO\n\nconst initialState = {\n    loading: false,\n    account: null,\n    CStoryNftContract: null,\n    CStoryTokenContract: null,\n    CStoryMineContract: null,\n    web3: null,\n    errorMsg: \"\",\n  };\n  \n  \n  // FUNCION ACTUALIZADORA DE ESTADO \n  \n  const blockchainReducer = (state = initialState, action) => {\n    switch (action.type) {\n      case \"PETICION_DE_CONEXION\":\n        return {\n          ...initialState,\n          loading: true,\n        };\n      case \"CONEXION_EXITOSA\":\n        return {\n          ...state,\n          loading: true,\n          account: action.payload.account,\n          CStoryNftContract: action.payload.CStoryNftContract,\n          CStoryTokenContract: action.payload.CStoryTokenContract,\n          CStoryMineContract: action.payload.CStoryMineContract,\n          web3: action.payload.web3,\n        };\n      case \"CONEXION_FALLIDA\":\n        return {\n          ...initialState,\n          loading: false,\n          errorMsg: action.payload,\n        };\n      case \"UPDATE_ACCOUNT\":\n        return {\n          ...state,\n          account: action.payload.account,\n        };\n      default:\n        return state;\n    }\n  };\n\n  export default blockchainReducer","//ESTADO DEL NFT\n\nconst initialState = {\n    loading: false,\n    allNFTs: [],\n    allOwnerNFTs: [],\n    error: false,\n    errorMsg: \"\",\n  };\n  \n// ACTUALIZADOR DE ESTADO QUE TRAE LOS NFT DE LA BLOCKCHAIN\n\n  const dataReducer = (state = initialState, action) => {\n    switch (action.type) {\n      case \"CHECK_DATA_PETICION\":\n        return {\n          ...initialState,\n          loading: true,\n        };\n      case \"CHECK_DATA_EXITOSO\":\n        return {\n          ...initialState,\n          loading: true,\n          allNFTs: action.payload.allStoryNfts,\n          allOwnerNFTs: action.payload.allOwnerStoryNfts,\n          \n        };\n      case \"CHECK_DATA_FALLIDO\":\n        return {\n          ...initialState,\n          loading: false,\n          error: true,\n          errorMsg: action.payload,\n        };\n      default:\n        return state;\n    }\n  };\n  \n  export default dataReducer;","import { applyMiddleware, compose, createStore, combineReducers } from \"redux\";\nimport thunk from \"redux-thunk\";\n//reducers \nimport blockchainReducer from \"./blockchain/blockchainReducer\"\nimport dataReducer from './data/dataReducer' \n\nconst rootReducer = combineReducers({\n  blockchain: blockchainReducer,\n  data: dataReducer\n});\n\n// studiar \n\nconst middleware = [thunk];\nconst composeEnhancers = compose(applyMiddleware(...middleware));\n\nconst configureStore = () => {\n  return createStore(rootReducer, composeEnhancers);\n};\n\nconst store = configureStore();\n  \n\n\n  export default store\n  ","import store from \"../store\"\n\nconst fetchDataPeticion = () => {\n  return {\n    type: \"CHECK_DATA_PETICION\",\n  };\n};\n\nconst fetchDataExitoso = (payload) => {\n  return {\n    type: \"CHECK_DATA_EXITOSO\",\n    payload: payload,\n  };\n};\n\nconst fetchDataFallido = (payload) => {\n  return {\n    type: \"CHECK_DATA_FALLIDO\",\n    payload: payload,\n  };\n};\n\n// FETCH DATA DE LA BLOCKCHAIN\n\nexport const fetchData = (account) => {\n  \n  return async(dispatch)=>{\n\n\n    dispatch(fetchDataPeticion());\n\n      try {\n\n        \n        store.getState().blockchain.CStoryNftContract.options.address = '0xc44D7dE1bdEBaa1519265525a902dbB08a471300'\n\n        let allStoryNfts = await store\n        .getState()\n        .blockchain.CStoryNftContract.methods.getTrajeNFT()\n        .call();\n\n        let allOwnerStoryNfts = await store\n        .getState()\n        .blockchain.CStoryNftContract.methods.getOwnerTrajeNFT(account)\n        .call();\n\n        \n        \n\n       dispatch(\n        fetchDataExitoso({\n          allStoryNfts,\n          allOwnerStoryNfts,\n          \n        })\n       ) \n\n        console.log(allStoryNfts)\n\n        console.log(allOwnerStoryNfts)\n\n\n      } catch (error) {\n\n        dispatch(fetchDataFallido(\"Could not load data from contract.\"));\n\n      }\n\n\n  }\n      \n      \n    }\n\n","import { createImmediatelyInvokedFunctionExpression, isConstructorDeclaration } from \"typescript\";\nimport Web3 from \"web3\";\nimport CStoryNft from \"../../contracts/CStoryNFT.json\";\nimport CStoryCoin from \"../../contracts/ERC20Basic.json\";\nimport main from \"../../contracts/main.json\"\nimport { fetchData } from \"../data/dataActions.js\"\n\n\n\n// FUNCIONES QUE ACTUALIZAN EL ESTADO\n\nconst conexionRequest = () => {\n    return {\n      type: \"PETICION_DE_CONEXION\",\n    };\n  };\n  \n  const conexionExitosa = (payload) => {\n    return {\n      type: \"CONEXION_EXITOSA\",\n      payload: payload,\n      \n    };\n  };\n  \n  const conexionFallida = (payload) => {\n    return {\n      type: \"CONEXION_FALLIDA\",\n      payload: payload,\n    };\n  };\n  \n  const updateAccountRequest = (payload) => {\n    return {\n      type: \"UPDATE_ACCOUNT\",\n      payload: payload,\n    };\n  };\n\n  // FUNCION QUE CONECTA AL METAMASK, EXTRAE LOS DATOS DE WEB3 Y DEL CONTRADO \n\n  export const conexion =  () =>{\n      \n    return async (dispatch)=>{\n\n      dispatch(conexionRequest())\n\n      try {\n       \n        if(typeof window.ethereum !== 'undefined'){\n      \n          let web3 = new Web3(window.ethereum)\n          let web32 = new Web3()\n          let web33 = new Web3()\n\n          web32.setProvider(new Web3.providers.HttpProvider(\"http://localhost:7545\"));\n          web33.setProvider(new Web3.providers.HttpProvider(\"http://localhost:7545\"));\n\n         const account = await window.ethereum.request({\n            method: \"eth_requestAccounts\"\n          })\n\n          const networkId = await window.ethereum.request({\n            method: \"net_version\"\n          }) \n\n\n          const connectionNetwork = 97\n\n\n          const net= CStoryNft.networks[connectionNetwork]\n          //EXTRACION DATOS DEL CONTRATO \n\n          console.log(\"NETTWOOOORRRKK\")\n          console.log(net)\n\n           if(net){\n\n              const CStoryNftContrato = new web3.eth.Contract(\n                CStoryNft.abi,\n                CStoryNft.address\n              )\n\n              const CStoryToken = new web32.eth.Contract(\n                CStoryCoin.abi,\n                CStoryCoin.address\n              )\n\n              const CStoryMine = new web33.eth.Contract(\n                main.abi,\n                main.address\n              )\n              \n            \n              dispatch(conexionExitosa({\n          \n                  account: account[0],\n                  CStoryNftContract: CStoryNftContrato,\n                  CStoryTokenContract: CStoryToken,\n                  CStoryMineContract: CStoryMine,\n                  web3: web3\n              \n              }))\n\n        \n\n              fetchData(dispatch)\n           }\n\n\n      } else {\n        dispatch(conexionFallida(\"Worng network\"));\n      }\n\n      } catch (error) {\n        dispatch(conexionFallida(\"Metamask is not installed.\"))\n      }\n\n    }\n\n\n      \n    \n    }\n      // CAPTURA DE LA CUENTA METAMASK Y EL CONTRATO \n      \nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n      dispatch(updateAccountRequest({ account: account }));\n      dispatch(fetchData(account));\n      console.log(\"PROBANDO ACTIONS\" + account)\n        };\n      };\n        \n","\nimport { data } from \"autoprefixer\";\nimport React from \"react\";\n\nfunction NftRender (props){\n    \n    return(\n        <div>\n               \n        <div>\n            <p>IMAGEN DEL NFT</p>\n            <img/>\n        </div>\n\n\n        <div >\n          <br/>\n          <div>Name:{props.Nft.Name}</div>\n          <div>Str:{props.Nft.Str}</div>\n          <div>Dex:{props.Nft.Dex}</div>\n          <div>Luk:{props.Nft.Luk}</div>\n          <div>Int:{props.Nft.Int}</div>\n          <div>Mattk:{props.Nft.Mattk}</div>\n          <div>Wattk:{props.Nft.Wattk}</div>\n          <div>Type:{props.Nft.Type}</div>\n          <div>Class:{props.Nft.Class}</div>\n          <div>Rarity:{props.Nft.rarity}</div>\n          <br/>\n        \n        </div>\n   \n      </div>\n    )\n}\n\nexport default NftRender\n","import React from \"react\";\nimport blockchainReducer from \"../redux/blockchain/blockchainReducer\";\n\n\nfunction Exchange (props) {\n\n    \n\n    const prueba = () =>{\n\n        props.blockchainDatos.CStoryMineContract.options.address = '0x63c9bE47441FC2C2b7485165e08537ea970B7cD4'\n        props.blockchainDatos.CStoryMineContract.methods.balance_total()\n        .call()\n        .then((balance)=>{\n            console.log(balance)\n          })\n    }\n\n    // Funcion para visualizar el balance de tokens del Smart Contract\n /* balance_contrato = async (mensaje) => {\n    try {\n      console.log(mensaje)\n      // Balance del Smart Contract\n      const balance = await props.blockchain.CStoryMineContract.methods\n      alert(parseFloat(balance))\n    }catch(err){\n      this.setState({errorMessage: err.message})\n    } finally {\n      this.setState({loading: false})\n    }\n  } */\n\n\n\n    return (\n\n        <div>\n            <div>\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <a\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n            href=\"https://frogames.es/rutas-de-aprendizaje\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            DApp\n          </a>\n          <button onClick={prueba}>BOTON DE PRUEBA</button>\n          <ul className=\"navbar-nav px-3\"> \n            <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n              <small className=\"text-white\"><span id=\"account\"></span></small>\n\n            </li>\n\n           </ul>\n        </nav>\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div className=\"content mr-auto ml-auto\">\n                <h1>Comprar tokens ERC-20</h1>\n                <form onSubmit = {(event) => {\n                    event.preventDefault()\n                   // const direccion = \n                   // const cantidad = \n                   // const ethers = web3.utils.toWei(this.cantidad.value, 'ether')\n                   // const mensaje = 'Compra de tokens en ejecución...'\n                   // this.envio(direccion, cantidad, ethers, mensaje)\n                }}>  \n                \n                <input type= 'text' \n                        className='form-control mb-1' \n                        placeholder = 'Dirección de destino'\n                        /> \n                \n                <input type= 'text' \n                        className='form-control mb-1' \n                        placeholder = 'Cantidad de Tokens a comprar (1 Token = 1 Ether)'\n                        /> \n         \n                \n                <input type = 'submit'\n                        className= 'btn btn-block btn-danger btn-sm'\n                        value = 'COMPRAR TOKENS'/> \n                \n                \n                </form>\n\n                &nbsp;\n\n                <h1> Balance total de tokens de un usuario </h1>\n\n                <form onSubmit = {(event) => {\n                    event.preventDefault()\n                    const address = this.address_balance.value\n                    const mensaje = 'Balance de tokens de una persona en ejecución...'\n                    //this.balance_persona(address, mensaje)\n                }}>  \n\n                <input type= 'text' \n                        className='form-control mb-1' \n                        placeholder = 'Dirección del usuario'\n                       /> \n\n\n                <input type = 'submit'\n                        className= 'btn btn-block btn-success btn-sm'\n                        value = 'BALANCE DE TOKENS'/> \n\n\n                </form>\n\n                &nbsp;\n\n\n                <h1>Balance de tokens del Smart Contract</h1>\n\n                <form onSubmit = {(event) => {\n                    event.preventDefault()\n                    const mensaje = 'Balance de tokens del Smart Contract en ejecución...'\n                    \n                }}>  \n\n                <input type = 'submit'\n                        className= 'btn btn-block btn-primary btn-sm'\n                        value = 'BALANCE DE TOKENS'/> \n\n                </form>\n\n                &nbsp;\n\n                <h1> Añadir nuevos Tokens </h1>\n\n                <form onSubmit = {(event) => {\n                    event.preventDefault()\n                    const mensaje = 'Incremento de tokens del Smart Contract en ejecución...'\n                    //const num_tokens = \n                    //this.incremento_tokens(num_tokens, mensaje)\n                }}>  \n\n                <input type= 'text' \n                        className='form-control mb-1' \n                        placeholder = 'Cantidad de tokens a incrementar'\n                        /> \n\n\n                <input type = 'submit'\n                        className= 'btn btn-block btn-warning btn-sm'\n                        value = 'INCREMENTO DE TOKENS'/> \n\n                </form>\n              \n\n\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n        </div>\n    )\n}\n\n\n\nexport default Exchange;\n","import React, {useEffect, useState} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './index.css';\n//import {useDispatch, useSelector} from \"react-redux\"\nimport {conexion} from \"./redux/blockchain/blockchainActions\"\nimport { fetchData } from './redux/data/dataActions';\nimport store from \"./redux/store\"\nimport Nft from \"./components/nft\"\nimport { isMetaProperty } from 'typescript';\nimport NftRender from './components/nft';\nimport {\n  BrowserRouter,\n  Routes,\n  Route,\n  Switch\n} from \"react-router-dom\";\nimport MenuNav from './components/nav';\nimport Exchange from './components/exchange';\n\n\n//import TokenPruebas from './components/token';\n\n  \n  // Conexion al juego y vista principal  \n         \n\nconst _token = \"0xb1668A37e0e71f7CbbB59c010Db0D63633c86A2D\"\nconst address = \"0x323D10bB37De64726227a6D07284cda6f74aB173\"\nconst priceNFT = 100000\nconst owner = '0x7a1e8f7096B9ebD383bA61418f9f5568583b3568'\nconst receiberPrueba = '0xb24d78f866be8Fc7015d4fcE9b77EC7c9B6FF983'\n\n\nfunction App() {\n\n\n    const dispatch = useDispatch()\n    const blockchain = useSelector((store)=>  store.blockchain)\n    const data = useSelector((store) => store.data)\n\n\n  \n    // FUNCION DE MINTEO\n\n   \n\n    const MintNFT = (_account, _name, _rarity)=>{\n    \n      blockchain.CStoryNftContract.options.address = '0xc44D7dE1bdEBaa1519265525a902dbB08a471300'\n   \n      blockchain.CStoryNftContract.methods.createRandomNFT( _name, _rarity)\n      .send({\n        from: _account,\n        \n      }).then((receipt) => {\n        \n        console.log(\"QUE ES?\" + receipt);\n        dispatch(fetchData(_account));\n        console.log(\"TRAJES DEL PROPIETARIO\" + data.allOwnerNFTs)  \n        \n      })};\n\n\n      const pago = (receiber, priceNFT) =>{\n\n\n        blockchain.CStoryTokenContract.options.address = '0xc44D7dE1bdEBaa1519265525a902dbB08a471300'\n\n        blockchain.CStoryTokenContract.methods.transfer(receiber, priceNFT)\n        .send({\n          from: blockchain.account,\n        }).then((results)=>{\n          if(results.status){\n            MintNFT(blockchain.account ,\"Master-Blade\", 2)\n          }\n        })\n\n      \n      }\n      \n\n\n    useEffect(()=>{\n    \n      if(blockchain.account != \"\" || blockchain.CStoryNftContract != null){\n        dispatch(fetchData(blockchain.account))\n       \n        \n      }\n    },[blockchain])\n\n\n  return(\n    <div className='flex flex-col'>\n\n        \n    \n        {blockchain.account === \"\" || blockchain.CStoryNftContract === null ? (\n        \n          <button onClick={async(e)=>{\n          e.preventDefault()\n          dispatch(conexion())\n          console.log(\"CUENTA:\" + blockchain.account)\n          }}>\n          conectar\n          </button> \n      \n        ):(\n\n          <div>\n            \n            <div>\n              \n            </div>\n\n            <button onClick={(e)=>{\n            e.preventDefault();\n            MintNFT(blockchain.account ,\"Admin\", 1)\n          }}\n          >Mint Commond</button>\n\n          <button onClick={(e)=>{\n            e.preventDefault();\n            MintNFT(blockchain.account ,\"Admin\", 2)\n          }}\n          >Mint Epic</button>\n\n          <button onClick={(e)=>{\n            e.preventDefault();\n            MintNFT(blockchain.account,\"Admin\", 3)\n          }}\n          >Mint Legendary</button>\n\n          </div>\n          \n\n        )}\n\n        <div>\n          \n            <div>\n              <p>You Wallet: {blockchain.account}</p>\n              <p>Your NFT</p>\n            <div className=\"flex-row\">\n              {data.allOwnerNFTs.map((item, index) => {\n                  return(\n                    <div key={index}>\n                      <NftRender Nft = {item}/>  \n                    </div>\n                  )\n                })}\n            </div>\n            \n            </div>\n          </div>\n\n              <Exchange blockchainDatos = {blockchain}/>\n    </div> \n        )  \n        \n      \n}\n\nexport default App;\n ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store'\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n\n  <React.StrictMode>\n    <Provider store={store}>\n    <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 171;"],"sourceRoot":""}